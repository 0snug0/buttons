/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

const createArgumentObject = (source) => source.split("\n").reduce((acc, i) => {
    const split = i.split(" ");
    const key = split[0];
    acc[key] = split.filter((item) => item !== split[0]).join(" ");
    return acc;
}, {});
const removeButton = async (app, buttonName) => {
    const activeView = app.workspace.getActiveViewOfType(obsidian.MarkdownView);
    if (activeView) {
        const file = activeView.file;
        const originalContent = await app.vault.read(file);
        const button = `\u0060{3}button\nname ${buttonName}.*?remove true\n\u0060{3}`;
        const re = new RegExp(button, "gms");
        const splitContent = originalContent.split(re);
        const content = `${splitContent[0]} ${splitContent[1]}`;
        await app.vault.modify(file, content);
    }
    else {
        new obsidian.Notice("There was an issue adding content, please try again", 2000);
    }
};
const prependContent = async (app, insert, buttonName) => {
    const activeView = app.workspace.getActiveViewOfType(obsidian.MarkdownView);
    if (activeView) {
        const file = activeView.file;
        const originalContent = await app.vault.read(file);
        const buttonRegex = `\u0060{3}button\nname ${buttonName}.*?\n\u0060{3}`;
        const re = new RegExp(buttonRegex, "gms");
        const button = originalContent.match(re)[0];
        const splitContent = originalContent.split(re);
        const content = `${splitContent[0] ? splitContent[0] : ""}
${insert}
${button}
${splitContent[1] ? splitContent[1] : ""}`;
        await app.vault.modify(file, content);
    }
    else {
        new obsidian.Notice("There was an issue prepending content, please try again", 2000);
    }
};
const appendContent = async (app, insert, buttonName) => {
    const activeView = app.workspace.getActiveViewOfType(obsidian.MarkdownView);
    if (activeView) {
        const file = activeView.file;
        const originalContent = await app.vault.read(file);
        const buttonRegex = `\u0060{3}button\nname ${buttonName}.*?\n\u0060{3}`;
        const re = new RegExp(buttonRegex, "gms");
        const button = originalContent.match(re);
        const splitContent = originalContent.split(re);
        const content = `${splitContent[0] ? splitContent[0] : ""}
${button}
${insert}
${splitContent[1] ? splitContent[1] : ""}`;
        await app.vault.modify(file, content);
    }
    else {
        new obsidian.Notice("There was an issue appending content, please try again", 2000);
    }
};

const remove = (app, { name }) => {
    setTimeout(() => removeButton(app, name), 100);
};
const template = async (app, { name, type, action }) => {
    console.log("template button");
    const templatesEnabled = app.internalPlugins.plugins.templates.enabled;
    //only run if templates plugin is enabled
    if (templatesEnabled) {
        const folder = app.internalPlugins.plugins.templates.instance.options.folder;
        const allFiles = app.vault.getFiles();
        const file = allFiles.filter((file) => file.path === `${folder}/${action}.md`)[0];
        if (file) {
            const content = await app.vault.read(file);
            //prepend template above the button
            if (type.includes("prepend")) {
                prependContent(app, content, name);
                setTimeout(() => app.commands.executeCommandById("templater-obsidian:replace-in-file-templater"), 100);
            }
            // append template below the button
            if (type.includes("append")) {
                appendContent(app, content, name);
                setTimeout(() => app.commands.executeCommandById("templater-obsidian:replace-in-file-templater"), 100);
            }
        }
        else {
            new obsidian.Notice(`Couldn't find the specified template, please check and try again`, 2000);
        }
    }
    else {
        new obsidian.Notice("You need to have the Templates plugin enabled", 2000);
    }
};
const link = ({ action }) => {
    const link = action.trim();
    window.open(link);
};
const command = (app, { action }) => {
    const allCommands = app.commands.listCommands();
    const command = allCommands.filter((command) => command.name.toUpperCase() === action.toUpperCase().trim())[0];
    app.commands.executeCommandById(command.id);
};

//extend the obsidian module with some additional typings
class ButtonsPLugin extends obsidian.Plugin {
    async onload() {
        this.registerMarkdownCodeBlockProcessor("button", async (source, el) => {
            // create an object out of the arguments
            const args = createArgumentObject(source);
            //handle button clicks
            const clickHandler = async () => {
                //handle command buttons
                if (args.type === "command") {
                    command(this.app, args);
                }
                //handle link buttons
                if (args.type === "link") {
                    link(args);
                }
                //handle template buttons
                if (args.type.includes("template")) {
                    template(this.app, args);
                }
                //handle removing the button
                if (args.remove) {
                    remove(this.app, args);
                }
            };
            //create the button element
            const button = el.createEl("button", {
                text: args.name,
                cls: args.class
                    ? `${args.class} ${args.color}`
                    : `button-default ${args.color ? args.color : ""}`,
            });
            args.id ? button.setAttribute("id", args.id) : "";
            button.on("click", "button", () => {
                clickHandler();
            });
        });
    }
}

module.exports = ButtonsPLugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
